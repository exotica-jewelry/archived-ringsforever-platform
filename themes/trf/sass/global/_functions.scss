//
// Functions
//
// Documented with SassDoc.
//

/// Calculate rem with fallback pixels.
///
/// @link http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/
/// @author Fiona Chan
///
/// @param {font-size} $size - Font size in pixels
/// @group Utilities

@function calculate-rem($size) {
  $rem-size: $size / 16px;
  // Default font size on html element is 100%, equivalent to 16px.
  @return #{$rem-size}rem;
}

/// Helper function for calling colors from a Sass map.
///
/// @link http://www.sitepoint.com/using-sass-maps/
/// @author Hugo Giraudel
///
/// @param {color} $key - Color name
/// @group Utilities

@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn 'Unknown `#{$key}` in $colors.';
  @return null;
}

/// Computes a top-shadow for a card effect.
///
/// @link https://css-tricks.com/snippets/sass/material-shadows-mixin/
/// @author Hugo Giraudel
///
/// @param {Number} $depth - depth level
/// @return {List}
///
/// @group Utilities

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba($black, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
///
/// @link https://css-tricks.com/snippets/sass/material-shadows-mixin/
/// @author Hugo Giraudel
///
/// @param {Number} $depth - depth level
/// @return {List}
///
/// @group Utilities

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($black, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Create an optimized SVG URL for embedding.
///
/// @requires str-replace
///
/// @link http://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen
///
/// @group Utilities

@function svg-url($svg) {
  //
  // Chunk up string in order to avoid "stack level too deep" error
  //
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    // Encode (may need a few extra replacements)
    //
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

/// Replace characters in a string.
///
/// @link http://codepen.io/Tigt/blog/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen
///
/// @group Utilities
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace);
  }
  @return $string;
}
